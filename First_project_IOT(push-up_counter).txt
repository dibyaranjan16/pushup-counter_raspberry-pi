import cv2
import mediapipe as mp

# Initialize MediaPipe Hands model
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1, min_detection_confidence=0.5)

# Initialize OpenCV video capture
cap = cv2.VideoCapture(0)

# Initialize variables
pushup_count = 0
hand_open = False

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    # Convert BGR image to RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process frame with MediaPipe Hands
    results = hands.process(frame_rgb)

    # Draw hand landmarks
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Get landmarks of index and thumb fingers
            index_finger = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
            thumb = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]

            # Calculate distance between index finger and thumb
            distance = abs(index_finger.x - thumb.x) + abs(index_finger.y - thumb.y) + abs(index_finger.z - thumb.z)

            # Check if hand is open
            if distance > 0.1:
                hand_open = True
            else:
                # Increment push-up count if hand was closed and is now open
                if hand_open:
                    pushup_count += 1
                    print("Push-ups:", pushup_count)
                hand_open = False

    # Display push-up count on frame
    cv2.putText(frame, "Push-ups: " + str(pushup_count), (20, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display frame
    cv2.imwrite('output2.png', frame)

    # Break loop if 'q' is pressed
import keyboard

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Your existing code here

    if keyboard.is_pressed('q'):
        break


# Release resources
cap.release()
cv2.destroyAllWindows()